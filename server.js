const dotenv = require('dotenv');
const dbConnect = require('./config/dbConnect');

process.on('uncaughtException', (err) => {
  console.log('UNCAUGHT EXCEPTION! ðŸ’¥ Shutting dow....');
  console.log(err.name, err.message);
  process.exit(1);
});

dotenv.config({ path: './config.env' });

// Connect to MongoDB
dbConnect();

const app = require('./app');

const port = process.env.PORT || 3000;
const server = app.listen(port, () => {
  console.log(`App running on port ${port}...`);
});

process.on('unhandledRejection', (err) => {
  console.log('UNHANDLER REJECTION! ðŸ’¥ Shutting dow....');
  console.log(err.name, err.message);
  server.close(() => {
    process.exit(1);
  });
});

// Uncaught Exception is when you throw an error and did not catch anywhere.

// Unhandled promise rejection is similar, when you fail to catch a Promise.reject.

// It's about whether the error was generated by throw or by Promise.reject (more like error generate from sync vs async process/code). Note that throw inside an async function is Promise.reject as async functions are wrapped inside Promise for you
